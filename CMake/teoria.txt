Первый урок
https://www.youtube.com/watch?v=gSTLzOmFChs

c_make_minimum_requiered(VERSION 3.12 FATAL_ERROR)
// В этой строке указывается минимальная версия CMake, необходимая для сборки проекта
// Если версия CMake меньше, то CMake будет выдавать ошибку

project(BattleCity)
// Команда используется для определения имени и свойств проекта.  
// В этом случае он устанавливает имя проекта «BattleCity».

add_executable(BattleCity main.cpp)
// Команда используется для создания исполняемого файла (executable) из одного или нескольких исходных файлов.
// В данном случае, команда создает исполняемый файл с именем "BattleCity" из исходного файла main.cpp.

cmake -G "название генератора" путь к CMakeList.txt
// такой командой генерируется создаение билда проекта

cmake -- build путь к сгенерированому билду -- config Release --target название файла которое хотим сгенерировать 
// грубо говоря эта команда создает exe файл который мы указалти после target
// все это можно записать в скрипт (bat(WIN), bash(Lin))

# коментарий

add_library (targetName [STATIC | SHARED | MODULE] 
[EXCLUDE FROM ALL sourcel [source2 ...]])
// targetName: это имя, которое вы хотите дать своей целевой библиотеке.  

// [STATIC | SHARED | MODULE]: Этот необязательный аргумент указывает тип библиотеки, которую вы хотите создать.  Вы можете выбрать один из следующих вариантов: 
//    STATIC: создает статическую библиотеку (.a в Unix, .lib в Windows). 
//    SHARED: создает общую библиотеку или библиотеку с динамической компоновкой (.so в Unix, .dll в Windows). 
//    MODULE: создает библиотеку модулей (общая библиотека в macOS, аналогичная SHAREDна других платформах). 

// [EXCLUDE_FROM_ALL]: этот необязательный аргумент указывает CMake исключить библиотеку из целевого объекта сборки по умолчанию.  
// Если указано, библиотека будет собрана только в том случае, если это явно запрошено или требуется другими целями. 

// source1 [source2 ...]: это исходные файлы (например, .cpp, .c), которые вы хотите включить в библиотеку.  
// Укажите все исходные файлы, необходимые для сборки библиотеки. 

cmake - DBUILD_SHARED_LIBS=YES ..
// Команда используется для передачи определения переменной CMake ( BUILD_SHARED_LIBS)
// со значением YES в систему сборки CMake во время настройки. 

target_link_libraries(targetName
    <PRIVATE | PUBLIC | INTERFACE> item1 [item2 ...]
    [<PRIVATE | PUBLIC | INTERFACE> item3 [item4 ...]]
)
// target_link_libraries() Команда в CMake используется для указания библиотек, от которых зависит цель (исполняемый файл, библиотека и т. д.).

// targetName: это имя цели (например, исполняемого файла или библиотеки), с которой вы хотите связать библиотеки.

// <PRIVATE | PUBLIC | INTERFACE>: указывает тип связи для библиотек.  Типы связи имеют следующие значения: 
    // PRIVATE: когда вы указываете библиотеку или цель как PRIVATE, это означает, что библиотека используется только самой целью.
    // Другие цели, зависящие от текущей цели, не будут иметь доступа к этой библиотеке.  Это похоже на частный ресурс, используемый внутренне целью. 
    
    // PUBLIC: Если вы укажете библиотеку или цель как PUBLIC, это означает, что библиотека используется целью и любыми другими целями, которые от нее зависят. 
    // Это позволяет библиотеке быть доступной для других целей и использовать ее в своем коде. 
    
    // INTERFACE: Когда вы используете INTERFACE, это означает, что библиотека не используется текущим таргетом напрямую, но она нужна другим таргетам,
    // зависящим от текущего таргета.  Библиотека действует как интерфейс, предоставляя набор функций или зависимостей, которые могут использовать другие цели. 

// item1 [item2 ...]: это имена библиотек или целей, которые вы хотите связать с targetName.
// Вы можете указать несколько библиотек или целей, разделенных пробелами.

// Переменные https://www.youtube.com/watch?v=6LevneX6ryA&list=PL6x9Hnsyqn2UwWjSvjCzAY6sEOBrHY7VH&index=8

set (varName "a b c") 
// myVar ="a b c" (строка бещ точки с зяпятой)

set (varName a b c)
// myVar = "a;b;c" (строка через точку с запятой)

set (myVar a;b; c)
// myVar = "a;b;c"

set (myVar a b; c)
‡ myVar = "a;b;c"

set (myVar a "b c")
// myVar = "a;b с"

message("$(myVar)")
// выводит значение переменной 

$(myVar)
// использование переменной

set (foo ab) 
# foo = "ab"

set (bar ${foo}cd)
// bar = "abcd"

set (baz ${fool} cd) 
# baz = "ab;cd"

set (myVar ba)
// myVar = "ba"

set (big "${${myVar}r}ef")
// big = "${bar}ef" = "abcdef"

set (${foo} xyz) 
// ab = "xyz"

set (bar ${notSetVar})
// bar = ""

set (multiLine "First line ${myVar}
Second line with a \"guoted\" word')
// выведет First line ba
Second line with a "quoted" word

Кэшированные переменные https://youtu.be/6P3vOLuTAg4?list=PL6x9Hnsyqn2UwWjSvjCzAY6sEOBrHY7VH

set(varName value... CACHE type "description" [FORCE])
// varName: это имя, которое вы выбираете для своей переменной кэша

// value...: это значения по умолчанию, которые вы хотите присвоить переменной кэша

// CACHE type: указывает тип переменной кэша
    // BOOL: логическая переменная, представляющая двоичный выбор, либо TRUEили FALSE.
    // STRING: переменная, содержащая строковое значение.
    // PATH: похожа на строковую переменную, но конкретно представляет путь к файловой системе.
    // FILEPATH: Этот тип похож на PATHтип, но он также выполняет дополнительные проверки, специфичные для файлов.  
       Он гарантирует, что указанный файл существует, и предоставляет дополнительные операции, связанные с файлом. 
    // INTERNAL: внутренняя переменная, которая не предоставляется пользователю в процессе настройки CMake. 

option(optVar helpString TRUE)
// optVar: это имя, которое вы выбираете для своей опциональной переменной.  
   Переменные опций используются для предоставления пользователю логического выбора, как правило,
   для включения или отключения определенных функций или поведения. 

// helpString: это краткое описание или строка справки, которая предоставляет информацию о переменной опции.

// TRUE: Это указывает значение по умолчанию переменной опции.  
   В этом случае значение по умолчанию равно TRUE, что означает, что опция будет включена по умолчанию. 

Установка переменных командной строкой
https://youtu.be/-nhj5xuhQxw?list=PL6x9Hnsyqn2UwWjSvjCzAY6sEOBrHY7VH

cmake -D VAR_NAME = value /path/to/source
// VAR_NAME - это имя переменной, которую вы хотите установить
// value - значение, которое вы хотите присвоить переменной

Установка кешированных переменных командной строкой

cmake -DVAR_NAME:value=/path/to/value /path/to/source
// VAR_NAME - это имя кешированной переменной, которую вы хотите установить
// /path/to/value - значение, которое вы хотите присвоить переменной

